1.  Write a PYTHON program to check the validity of a password chosen by a user.
To be considered valid, a password

a) contains at least 1 letter between [A-Z],
b) contains at least 1 letter between [a-z],
c) contains at least 1 number between [0-9],
d) contains at least 1 special character from [$#@],
e) has a minimum length of 6 characters, and
f) has a maximum length of 12 characters.

Your program will consist of two user-defined functions: validate(s) and main(). The validate() function implements the validation procedure described above. The parameter (or input) to the function is a string s. If s fits the above criteria, print valid and also implement logging in a text file. Otherwise, print not valid.

2. Write a program to find frequency of each distinct word in a given text file input.txt. Your Output should be stored in a different file named output.txt  in alphanumeric order each word per line excluding all special characters.(if numeric values are present in file it should be at the start of output file)

3. Write a binary search function which searches for an element in a list. Your output should return index of element if present otherwise raise an exception ‘Element not found’

4. Write a program to Sort a List of Tuples in Increasing Order by the Last Element in Each Tuple. Take input of your choice but program should be dynamic enough with size of list.

5. Load the following json content and print the arn of the s3 bucket

{
  "Records": [
    {
      "eventVersion": "2.0",
      "eventTime": "1970-01-01T00:00:00.000Z",
      "requestParameters": {
        "sourceIPAddress": "127.0.0.1"
      },
      "s3": {
        "configurationId": "testConfigRule",
        "object": {
          "eTag": "0123456789abcdef0123456789abcdef",
          "sequencer": "0A1B2C3D4E5F678901",
          "key": "HappyFace.jpg",
          "size": 1024
        },
        "bucket": {
          "arn": "arn:aws:s3:::mybucket",
          "name": "sourcebucket",
          "ownerIdentity": {
            "principalId": "EXAMPLE"
          }
        },
        "s3SchemaVersion": "1.0"
      },
      "responseElements": {
        "x-amz-id-2": "EXAMPLE123/5678abcdefghijklambdaisawesome/mnopqrstuvwxyzABCDEFGH",
        "x-amz-request-id": "EXAMPLE123456789"
      },
      "awsRegion": "us-east-1",
      "eventName": "ObjectCreated:Put",
      "userIdentity": {
        "principalId": "EXAMPLE"
      },
      "eventSource": "aws:s3"
    }
  ]
}
